// Generated by LiveScript 1.2.0
var done, fail, x$;
done = function(){};
fail = function(it){
  console.error("[Error] ", it);
  return document.body.innerHTML = it;
};
x$ = angular.module('donvote');
x$.factory('Restbase', function($http){
  var ret;
  return ret = {
    bind: function(type, cbs){
      var ret, this$ = this;
      cbs == null && (cbs = {});
      return ret = {
        create: function(d, cb, cb2){
          return this$.create(type, d, cb || (cbs.create || (cbs.create = {})).ok, cb2 || (cbs.create || (cbs.create = {})).fail);
        },
        getlist: function(cb, cb2){
          return this$.getlist(type, cb || (cbs.getlist || (cbs.getlist = {})).ok, cb2 || (cbs.getlist || (cbs.getlist = {})).fail);
        },
        remove: function(d, cb, cb2){
          return this$.remove(type, d, cb || (cbs.remove || (cbs.remove = {})).ok, cb2 || (cbs.remove || (cbs.remove = {})).fail);
        },
        update: function(d, cb, cb2){
          return this$.update(type, d, cb || (cbs.update || (cbs.update = {})).ok, cb2 || (cbs.update || (cbs.update = {})).fail);
        },
        sub: {
          create: function(typeB, c, d, cb, cb2){
            var ref$;
            return this$.sub.create(type, typeB, c, d, cb || ((ref$ = cbs.sub || (cbs.sub = {})).create || (ref$.create = {})).ok, cb2 || ((ref$ = cbs.sub || (cbs.sub = {})).create || (ref$.create = {})).fail);
          },
          remove: function(typeB, c, d, cb, cb2){
            var ref$;
            return this$.sub.remove(type, typeB, c, d, cb || ((ref$ = cbs.sub || (cbs.sub = {})).remove || (ref$.remove = {})).ok, cb2 || ((ref$ = cbs.sub || (cbs.sub = {})).remove || (ref$.remove = {})).fail);
          },
          update: function(typeB, c, d, cb, cb2){
            var ref$;
            return this$.sub.update(type, typeB, c, d, cb || ((ref$ = cbs.sub || (cbs.sub = {})).update || (ref$.update = {})).ok, cb2 || ((ref$ = cbs.sub || (cbs.sub = {})).update || (ref$.update = {})).fail);
          }
        }
      };
    },
    create: function(type, d, cb, cb2){
      cb == null && (cb = done);
      cb2 == null && (cb2 = fail);
      return $http({
        url: "/api/" + type + "/",
        method: 'POST',
        data: JSON.stringify(d)
      }).success(cb).error(cb2);
    },
    getlist: function(type, cb, cb2){
      cb == null && (cb = done);
      cb2 == null && (cb2 = fail);
      return $http({
        url: "/api/" + type + "/",
        method: 'GET'
      }).success(cb).error(cb2);
    },
    remove: function(type, d, cb, cb2){
      cb == null && (cb = done);
      cb2 == null && (cb2 = fail);
      return $http({
        url: "/api/" + type + "/" + d.id + "/",
        method: 'DELETE'
      }).success(function(){
        return cb(d);
      }).error(cb2);
    },
    update: function(type, d, cb, cb2){
      cb == null && (cb = done);
      cb2 == null && (cb2 = fail);
      return $http({
        url: "/api/" + type + "/" + d.id + "/",
        method: 'PUT',
        data: JSON.stringify(d)
      }).success(cb).error(cb2);
    },
    sub: {
      create: function(typeA, typeB, c, d, cb, cb2){
        cb == null && (cb = done);
        cb2 == null && (cb2 = fail);
        c[typeB] = c[typeB].concat([d]);
        return ret.update(typeA, c, cb, cb2);
      },
      remove: function(typeA, typeB, c, d, cb, cb2){
        cb == null && (cb = done);
        cb2 == null && (cb2 = fail);
        c[typeB] = c[typeB].filter(function(it){
          return it.id !== d.id;
        });
        return ret.update(typeA, c, function(){
          return ret.remove(typeB, d, cb, cb2);
        }, cb2);
      },
      update: function(typeA, typeB, c, d, cb, cb2){
        cb == null && (cb = done);
        cb2 == null && (cb2 = fail);
        return ret.update(typeB, d, cb, cb2);
      }
    }
  };
});
x$.controller('Ctrl.Vote', function($scope, $http, Restbase){
  $scope.rest = Restbase;
  $scope.rest2 = Restbase.bind('vote', {
    create: {
      ok: function(d){
        return $scope.votelist = $scope.votelist.concat([d]);
      }
    },
    remove: {
      ok: function(d){
        return $scope.votelist = $scope.votelist.filter(function(it){
          return it.id !== d.id;
        });
      }
    },
    sub: {
      create: {
        ok: function(d){
          var i$, ref$, len$, i, v, results$ = [];
          for (i$ = 0, len$ = (ref$ = $scope.votelist).length; i$ < len$; ++i$) {
            i = i$;
            v = ref$[i$];
            if (v.id === d.id) {
              results$.push($scope.votelist[i] = d);
            }
          }
          return results$;
        },
        fail: function(d){
          return console.error("failed: ", d);
        }
      }
    }
  });
  $scope.newvote = {
    karma: [],
    discuss: [],
    plan: []
  };
  $scope.newplan = {};
  $scope.newdiscuss = {};
  return $scope.rest2.getlist(function(it){
    return $scope.votelist = it;
  });
});
/*angular.module \donvote
  ..controller \voteListController, ($scope, $http) ->
    $scope.votelist = []
    $scope.newvote = {karma: [], discuss: []}
    $scope.newplan = {}
    $scope.newdiscuss = {}
    $scope.addvote = ->
      $http do
        url: \/api/vote/
        method: \POST
        data: JSON.stringify($scope.newvote)
      .success (d) -> 
        window.location.reload!
        console.log d
      .error (d) -> console.log d
    $scope.fetch = ->
      $http do
        url: \/api/vote/
        method: \GET
      .success (d) -> 
        $scope.votelist = d
        for it in $scope.votelist =>
          $scope.newplan[it.id] = {}
          $scope.newdiscuss[it.id] = {}
        console.log d
      .error (d) -> console.log d

    $scope.addplan = (v) ->
      console.log $scope.newplan[v.id]
      #v.plan = v.plan ++ [d]
      console.log $scope.user
      $scope.newplan[v.id].owner_id = 1
      v.plan = v.plan ++ [$scope.newplan[v.id]]

      console.log ">>>", v
      $http do
        url: "/api/vote/#{v.id}"
        method: \PUT
        data: JSON.stringify(v)
      .success (d) -> 
        console.log d
        #window.location.reload!
      .error (d) -> 
        document.body.innerHTML = d
        console.log d

    $scope.removeplan = (u, v) ->
      u.plan = u.plan.filter -> it.id !=v.id
      $http do
        url: "/api/vote/#{u.id}"
        method: \PUT
        data: JSON.stringify(u)
      .success (d) -> console.log "done.", d
      .error (d) -> console.log "failed. ", d
      $http do
        url: "/api/plan/#{v.id}"
        method: \DELETE
      .success (d) -> console.log "deleted.", d
      .error (d) -> console.log "failed. ", d

    $scope.adddiscuss = (v) ->
      console.log $scope.newdiscuss[v.id]
      $http do
        url: \/api/discuss/
        method: \POST
        data: JSON.stringify($scope.newdiscuss[v.id])
      .success (d) -> 
        console.log d
        v.discuss = v.discuss ++ [d]
        console.log ">>>", v
        $http do
          url: "/api/vote/#{v.id}"
          method: \PUT
          data: JSON.stringify(v)
        .success (d) -> 
          console.log d
          #window.location.reload!
        .error (d) -> console.log d
      .error (d) -> console.log d
    $scope.removediscuss = (u, v) ->
      u.discuss = u.discuss.filter -> it.id !=v.id
      $http do
        url: "/api/vote/#{u.id}"
        method: \PUT
        data: JSON.stringify(u)
      .success (d) -> console.log "done.", d
      .error (d) -> console.log "failed. ", d
      $http do
        url: "/api/discuss/#{v.id}"
        method: \DELETE
      .success (d) -> console.log "deleted.", d
      .error (d) -> console.log "failed. ", d
    $scope.fetch!
    */