// Generated by LiveScript 1.2.0
var x$;
x$ = angular.module('donvote');
x$.controller('votedetail', function($scope, $http){
  var pretainViewbox, voteChart;
  pretainViewbox = {
    target: {},
    init: function(){
      var this$ = this;
      return $(window).resize(function(){
        return this$.listener();
      });
    },
    register: function(obj){
      while (!obj.key || this.target[obj.key]) {
        obj.key = Math.random();
      }
      this.target[obj.key] = obj;
      return this.handler(obj);
    },
    worker: null,
    listener: function(){
      var this$ = this;
      if (this.worker) {
        clearTimeout(this.worker);
      }
      return this.worker = setTimeout(function(){
        var k, ref$, v;
        for (k in ref$ = this$.target) {
          v = ref$[k];
          this$.handler(v);
        }
        return this$.worker = null;
      }, 500);
    },
    handler: function(obj){
      var ref$, w, h, m, x$;
      ref$ = [$(obj.svg[0][0]).width(), $(window).height() - obj.dh, obj.m], w = ref$[0], h = ref$[1], m = ref$[2];
      $(obj.svg[0][0]).height(h);
      x$ = (obj.w = w, obj.h = h, obj);
      x$.svg[0][0].setAttribute("viewBox", (-m) + " " + (-m) + " " + (w + 2 * m) + " " + (h + 2 * m));
      x$.render();
      return x$;
    }
  };
  pretainViewbox.init();
  voteChart = {
    svg: d3.select('#vote-chart'),
    data: [],
    w: 0,
    h: 0,
    m: 20,
    dh: 250,
    name: ['Jody', 'Stanley', 'Harvey', 'Adrienne', 'Antonio', 'Laverne', 'Cesar', 'Ramon', 'Julie', 'Deanna', 'Cristen', 'Sammie'],
    color: d3.scale.category20(),
    verticalBar: {
      scale: function(r){
        this.xscale = d3.scale.linear().domain([0, this.data.length]).range([0, this.w]);
        this.yscale = d3.scale.linear().domain([
          0, d3.max(this.data.map(function(it){
            return it.count;
          }))
        ]).range([this.h, 0]);
        return this.mb = this.w > 500 && this.data.length < 10 ? 10 : 2;
      },
      render: function(s){
        var x$, y$, z$, z1$, z2$, this$ = this;
        s[0].attr({
          x: function(d, i){
            return this$.xscale(i);
          },
          y: function(d, i){
            return this$.yscale.range()[0];
          },
          width: function(d, i){
            return this$.xscale(i + 1) - this$.xscale(i) - this$.mb;
          },
          height: 0,
          fill: function(d, i){
            return d.color;
          }
        });
        x$ = s[1];
        x$.attr({
          x: function(d, i){
            return (this$.xscale(i) + this$.xscale(i + 1) - this$.mb) / 2;
          },
          y: function(d, i){
            return this$.yscale.range()[0];
          },
          dy: -10,
          width: 0,
          height: 0
        });
        x$.text(function(it){
          return it.name;
        });
        y$ = this.svg.selectAll('g.rect').select('rect');
        z$ = y$.transition().duration(1000);
        z$.attr({
          x: function(d, i){
            return this$.xscale(i);
          },
          width: function(d, i){
            return this$.xscale(i + 1) - this$.xscale(i) - this$.mb;
          },
          y: function(d, i){
            return this$.yscale(d.count);
          },
          height: function(d, i){
            var ref$;
            return (ref$ = this$.yscale(0) - this$.yscale(d.count)) > 5 ? ref$ : 5;
          },
          fill: function(d, i){
            return d.color;
          }
        });
        z1$ = this.svg.selectAll('g.text').select('text');
        z2$ = z1$.transition().duration(1000);
        z2$.attr({
          x: function(d, i){
            return (this$.xscale(i) + this$.xscale(i + 1) - this$.mb) / 2;
          },
          y: function(d, i){
            return this$.yscale(d.count);
          },
          "text-anchor": "middle",
          "dorminant-baseline": "central"
        });
        z1$.text(function(d, i){
          return d.name;
        });
        return z1$;
      }
    },
    horizontalBar: {
      scale: function(){
        this.xscale = d3.scale.linear().domain([
          0, d3.max(this.data.map(function(it){
            return it.count;
          }))
        ]).range([0, this.w]);
        this.yscale = d3.scale.linear().domain([0, this.data.length]).range([0, this.h]);
        return this.mb = this.h > 500 && this.data.length < 10 ? 10 : 2;
      },
      render: function(s){
        var x$, y$, z$, z1$, z2$, this$ = this;
        s[0].attr({
          x: function(d, i){
            return this$.xscale.range()[0];
          },
          y: function(d, i){
            return this$.yscale(i);
          },
          width: 0,
          height: function(d, i){
            var ref$;
            return (ref$ = this$.yscale(i + 1) - this$.yscale(i) - this$.mb) > 0 ? ref$ : 0;
          },
          fill: function(d, i){
            return d.color;
          }
        });
        x$ = s[1];
        x$.attr({
          x: function(d, i){
            return this$.xscale.range()[0];
          },
          y: function(d, i){
            return (this$.yscale(i) + this$.yscale(i + 1) - this$.mb) / 2;
          },
          width: 0,
          height: 0
        });
        x$.text(function(it){
          return it.name;
        });
        y$ = this.svg.selectAll('g.rect').select('rect');
        z$ = y$.transition().duration(1000);
        z$.attr({
          x: function(d, i){
            return this$.xscale.range()[0];
          },
          width: function(d, i){
            var ref$;
            return (ref$ = this$.xscale(d.count) - this$.xscale(0)) > 5 ? ref$ : 5;
          },
          y: function(d, i){
            return this$.yscale(i);
          },
          height: function(d, i){
            var ref$;
            return (ref$ = this$.yscale(i + 1) - this$.yscale(i) - this$.mb) > 2 ? ref$ : 2;
          },
          fill: function(d, i){
            return d.color;
          }
        });
        z1$ = this.svg.selectAll('g.text').select('text');
        z2$ = z1$.transition().duration(1000);
        z2$.attr({
          x: function(d, i){
            return 10;
          },
          y: function(d, i){
            return (this$.yscale(i) + this$.yscale(i + 1) - this$.mb) / 2;
          },
          "text-anchor": "left",
          "dominant-baseline": "central"
        });
        z1$.text(function(d, i){
          return d.name;
        });
        return z1$;
      }
    },
    use: function(choice){
      var ref$;
      if (choice) {
        this.choice = choice;
      }
      return this.type = (ref$ = this[this.choice], ref$.w = this.w, ref$.h = this.h, ref$.m = this.m, ref$.dh = this.dh, ref$.color = this.color, ref$.svg = this.svg, ref$.data = this.data, ref$);
    },
    choice: 'horizontalBar',
    render: function(){
      var s, this$ = this;
      this.data.sort(function(a, b){
        return a.count - b.count;
      });
      this.use();
      this.type.scale();
      s = ['rect', 'text'].map(function(it){
        var v;
        v = this$.svg.selectAll("g." + it).data(this$.data);
        v.exit().transition().duration(1000).style({
          opacity: 0
        }).remove();
        return v.enter().append('g').attr('class', it).append(it);
      });
      return this.type.render(s);
    }
  };
  pretainViewbox.register(voteChart);
  $scope.settype = function(it){
    voteChart.use(it);
    return voteChart.render();
  };
  return $http({
    url: "/api/vote/" + voteid + "/",
    method: 'GET'
  }).success(function(d){
    console.log(d);
    voteChart.data = d.plan;
    d.plan.map(function(it){
      it.count = parseInt(Math.random() * 1000);
      return it.color = voteChart.color(it.name);
    });
    return voteChart.render();
  });
});